services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=test_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
    depends_on:
      - postgres
    networks:
      - network
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - network
    environment:
      - VITE_API_URL=http://localhost:8080

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/servers.json
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin-servers.json:/pgadmin4/servers.json:ro
    command: >
      sh -c "
        echo 'Waiting for postgres to be ready...' &&
        while ! nc -z postgres 5432; do sleep 1; done &&
        echo 'Postgres is ready!' &&
        /entrypoint.sh
      "

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/simple-prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

networks:
  network:
    driver: bridge 