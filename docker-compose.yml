services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=test_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      - OTEL_SERVICE_NAME=nestjs-backend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=dev
    depends_on:
      - postgres
    networks:
      - network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - network
    environment:
      - VITE_API_URL=http://localhost:8080

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/servers.json
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin-servers.json:/pgadmin4/servers.json:ro
    command: >
      sh -c "
        echo 'Waiting for postgres to be ready...' &&
        while ! nc -z postgres 5432; do sleep 1; done &&
        echo 'Postgres is ready!' &&
        /entrypoint.sh
      "

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/simple-prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-pyroscope-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - network
    depends_on:
      - prometheus
      - tempo
      - loki
      - pyroscope
      - otel-collector

  # Logs (Loki) + Log shipper (Promtail)
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: ["-config.file=/etc/loki/config.yaml"]
    ports:
      - "3100:3100"
    networks:
      - network
    volumes:
      - ./monitoring/loki/config.yaml:/etc/loki/config.yaml:ro

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
    command: ["-config.file=/etc/promtail/config.yml"]
    networks:
      - network
    depends_on:
      - loki

  # Traces (Tempo)
  tempo:
    image: grafana/tempo:2.8.0
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./monitoring/tempo/tempo.yaml:/etc/tempo.yaml:ro
    ports:
      - "3200:3200"  # Tempo HTTP query (Grafana uses container DNS; external exposure optional)
    networks:
      - network

  # Profiles (Pyroscope)
  pyroscope:
    image: grafana/pyroscope:1.14.0
    container_name: pyroscope
    ports:
      - "4040:4040"
    networks:
      - network
    volumes:
      - pyroscope_data:/var/lib/pyroscope

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    environment:
      - DATA_SOURCE_URI=postgres:5432/postgres?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=password
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=true
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres-exporter/queries.yaml
    volumes:
      - ./monitoring/postgres/queries.yaml:/etc/postgres-exporter/queries.yaml:ro
    depends_on:
      - postgres
    networks:
      - network

  # OpenTelemetry Collector Contrib
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./monitoring/otelcol/config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "8889:8889"  # Prometheus scrape endpoint (exported metrics)
      - "8888:8888"  # Collector self-telemetry metrics
    networks:
      - network
    depends_on:
      - tempo
      - loki

volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  pyroscope_data:

networks:
  network:
    driver: bridge 